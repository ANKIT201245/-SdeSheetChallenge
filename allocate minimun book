
// We will set a search space. The lower boundary will be of minimal value among all the books given.
The upper boundary will be the sum of all book pages given. 
Then apply binary search. How to change the range of searching?
While searching, allocate pages to each student in such a way that the sum of allocated pages of each student is not greater than the mid-value of search space.
If allocating students increases more than the number of students provided,
this shows that mid-value should be more, and hence, we move right by restricting our lower boundary as mid+1.
If an allocation is possible then reduce the search upper boundary by mid-1. Also, an edge case to check while allocating,
each book page should not be greater than mid-value chosen as a barrier.
bool isPossible(int n, int m, vector<int> time, long long int mid)
{
    int day = 1;
    long long int reqTime = 0;
    for(int i=0; i<m; i++)
    {
        if(reqTime + time[i] <= mid)
        {
            reqTime += time[i];
        }
        else
        {
            day++;
            if(day>n || time[i] > mid)
            {
                return false;
            }
            reqTime = time[i];
        }
    }
    return true;
}
long long ayushGivesNinjatest(int n, int m, vector<int> time) 
{	
	// Write your code here.
    long long start = 0;
    long long totalTime = 0;
    for(int i=0; i<time.size(); i++)
    {
        totalTime+=time[i];
    }
    long long end = totalTime;
    long long ans = -1;
    while(start<=end)
    {
        long long mid = start + (end-start)/2;
        if(isPossible(n, m, time, mid))
        {
            ans = mid;
            end = mid-1;
        }
        else
        {
            start = mid+1;
        }
    }
    return ans;
}
