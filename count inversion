#include <bits/stdc++.h> 
long long int countAndMerge(long long int arr[],  int l,  int m,  int r)
{
    long long int n1=m-l+1, n2=r-m;
    long long int left[n1],right[n2];
    for(long long int i=0;i<n1;i++)
        left[i]=arr[i+l];
    for(long long int j=0;j<n2;j++)
        right[j]=arr[m+1+j];    
    long long int res=0,i=0,j=0,k=l;
    while(i<n1 && j<n2)
    {
        if(left[i]<=right[j])
            {
                arr[k]=left[i];
                i++;
               
            }
        else
        {
            arr[k]=right[j];
            
            j++;
            res=res+n1-i;
        }
    k++;
    }
    while(i<n1)
    {
        arr[k]=left[i];
                i++;
                k++;
    }
    while(j<n2)
    {
        arr[k]=right[j];
            k++;
            j++;
    }
    return res;
}
long long int countInv(long long int arr[],  int l,  int r)
{
    long long int res = 0;
    if (l<r) {
       
        int m = l+(r-l)/2;
 
        res += countInv(arr, l, m);
        res += countInv(arr, m + 1, r);
        res += countAndMerge(arr, l, m , r);
    }
    return res;
}
long long getInversions(long long *arr, int n){
    return countInv(arr,0,n-1);
}
