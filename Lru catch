#include<bits/stdc++.h>
    class node{
        public:
        int val,key;
        node *next,*prev;
        node(int _key,int _data)
        {
            key=_key;
            val=_data;
            next=prev=NULL;
        }
    };
class LRUCache
{ 
public:
    node *head=new node(-1,-1),*tail=new node(-1,-1);
    int size=0;
    unordered_map<int,node*>hashmap;
    LRUCache(int capacity)
    {
        size=capacity;
        head->next=tail;
        tail->prev=head;
    }
    void add(node *newnode)
    {
        newnode->next=head->next;
        newnode->prev=head;
        head->next->prev=newnode;
        head->next=newnode;
    }
     void del(node* delnode){
        delnode->next->prev=delnode->prev;
        delnode->prev->next=delnode->next;
        
    }
    int get(int key)
    {
        if(hashmap.find(key)== hashmap.end())
            return -1;
        del(hashmap[key]);
        add(hashmap[key]);
        hashmap[key]=head->next;
        return head->next->val;
    }

    void put(int key, int value)
    {
        if(hashmap.find(key)!= hashmap.end())
        {
            del(hashmap[key]);
            hashmap.erase(key);
            
        }
       
        if(hashmap.size()==size){
            hashmap.erase(tail->prev->key);
            del(tail->prev);
        }
        
       
        
        add(new node(key,value));
        hashmap[key]=head->next;
    }
};
