 bool helper(vector<int>&nums,int size,int target,vector<vector<int>>&dp)
    {
     
        if(target==0)return true;
        if(size==0)return nums[0]==target;
          if(dp[size][target]!=-1)return dp[size][target];
        bool nottake= helper(nums,size-1,target,dp);
        bool take=false;
         if(nums[size]<=target)
        take=helper(nums,size-1,target-nums[size],dp);
         return dp[size][target]=take||nottake;
    }
bool subsetSumToK(int n, int k, vector<int> &nums) {
    vector<vector<int>>dp(n+1,vector<int>(k+1,-1));
        return helper(nums,n-1,k,dp);
}
bool canPartition(vector<int> &arr, int n)
{
	
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=arr[i];
        }
        if(sum&1)return false;
       return  subsetSumToK(n,sum/2,arr);
}
